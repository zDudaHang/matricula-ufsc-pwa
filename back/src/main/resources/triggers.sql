CREATE OR REPLACE FUNCTION atualizar_posicoes_entrada_aluno()
RETURNS TRIGGER AS $atualizar_posicoes_entrada_aluno$
BEGIN
	RAISE NOTICE '[ENTRADA DO ALUNO] CÓDIGO DA TURMA A SER ATUALIZADA: %', NEW.TURMA_CODIGO;
	WITH SUBQUERY AS (
		SELECT
			TPM.ALUNO_MATRICULA AS MATRICULA,
	       	TPM.TURMA_CODIGO AS CODIGO,
	       	ROW_NUMBER() OVER(ORDER BY TPM.IAA_ALUNO DESC) AS POSICAO
		FROM TB_PEDIDO_MATRICULA TPM
		WHERE TPM.TURMA_CODIGO = NEW.TURMA_CODIGO
	)
	UPDATE TB_PEDIDO_MATRICULA
	SET POSICAO = SUBQUERY.POSICAO
	FROM SUBQUERY
	WHERE SUBQUERY.MATRICULA = ALUNO_MATRICULA AND SUBQUERY.CODIGO = TURMA_CODIGO;
	RETURN NEW;
END;
$atualizar_posicoes_entrada_aluno$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION atualizar_posicoes_saida_aluno()
RETURNS TRIGGER AS $atualizar_posicoes_saida_aluno$
BEGIN
	RAISE NOTICE '[SAÍDA DO ALUNO] CÓDIGO DA TURMA A SER ATUALIZADA: %', OLD.TURMA_CODIGO;
	UPDATE TB_PEDIDO_MATRICULA
	SET POSICAO = POSICAO - 1
	WHERE OLD.TURMA_CODIGO = TURMA_CODIGO;
	RETURN OLD;
END;
$atualizar_posicoes_saida_aluno$ LANGUAGE plpgsql;

CREATE TRIGGER atualizar_posicoes_entrada_aluno
AFTER INSERT ON TB_PEDIDO_MATRICULA
FOR EACH ROW
EXECUTE PROCEDURE atualizar_posicoes_entrada_aluno();

CREATE TRIGGER atualizar_posicoes_saida_aluno
AFTER DELETE ON TB_PEDIDO_MATRICULA
FOR EACH ROW
EXECUTE PROCEDURE atualizar_posicoes_saida_aluno();